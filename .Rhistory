color = "Confounded estimate")) + xlab("X") + ylab("CATE")
Correction_df <- Correction_df %>% mutate(B = C_E - IV_E)
Bias_model <- lm(B ~ X_r,
data = Correction_df %>% filter(high_C),
weights = Marginal_C_prob)
Correction_df$My_E <- sapply(Correction_df$X_r, Corrected_estimator)
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = My_E,
color = "Corrected estimate")) +
geom_line(aes(x = X_range, y = C_E,
color = "Confounded estimate")) + xlab("X") + ylab("CATE")
library(doParallel)
library(doRNG)
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(gridExtra)
C_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of compliance
return((UP.*(plogis(ZT.+UT.+(XT.*x)) - plogis(UT.+(XT.*x)))) +
((1-UP.)*(plogis(ZT.+(XT.*x)) - plogis(XT.*x))))
}
AT_probability <- function(x, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of always-taker
return((UP.*plogis(UT.+(XT.*x))) + ((1-UP.)*plogis(XT.*x)))
}
NT_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of never taker
return(1-((UP.*plogis(ZT.+UT.+(XT.*x))) + ((1-UP.)*plogis(ZT.+(XT.*x)))))
}
T_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP, ZP. = ZP){
#Function to calculate true probability of T = 1
return((UP.*ZP.*plogis(ZT.+UT.+(XT.*x))) +
(UP.*(1-ZP.)*plogis(UT.+(XT.*x))) +
((1-UP.)*ZP.*plogis(ZT.+(XT.*x))) +
((1-UP.)*(1-ZP.)*plogis((XT.*x))))
}
C_prob_estimator <- function(x, D_model = Denominator_model){
#Function to calculate estimate probability of compliance
out <- predict(D_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
return(out[2] - out[1])
}
IV_estimator <- function(x, N_model = Numarator_model,
D_model = Denominator_model, Y_bin = FALSE){
#Function to estimate the CATE with IV
N_class <- class(N_model)[length(class(N_model))]
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
if(Y_bin){
if(N_class == "lm"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
}else if(N_class == "svm"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)), probability = TRUE)
numarator <- attributes(numarator)$probabilities %>% as.data.frame()
numarator <- numarator[["TRUE"]]
}else if(N_class == "randomForest"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)), type = "prob") %>% as.data.frame()
numarator <- numarator[["TRUE"]]
}else{
return("N_model is not supported")
}
}
numarator <- numarator[2] - numarator[1]
denominator <- predict(D_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
denominator <- denominator[2] - denominator[1]
return(numarator/denominator)
}
Confounded_estimator <- function(x, C_model = Confounded_model){
#Function to estimate the CATE with confounded model
out <- predict(C_model, newdata = data.frame(X = c(x,x), T = c(0,1)),
type = "response")
return(out[2] - out[1])
}
Corrected_estimator <- function(x, C_model = Confounded_model,
B_model = Bias_model){
#Function to estimate the CATE combining the confounded and the IV model
C_out <- predict(C_model, newdata = data.frame(X = c(x,x), T = c(0,1)),
type = "response")
B_out <- predict(B_model, newdata = data.frame(X_r = x),
type = "response")
return(C_out[2] - C_out[1] - B_out)
}
n <- 5000
UP <- 0.5
X_mean <- 1.5
X_sd <- 1
ZP <- 0.5
delta_sd <- 1
epsilon_sd <- 1
UT <- -3
XT <- 2
ZT <- 4
UY <- 6
XY <- 2
alpha <- 2
beta <- 2
X_range <- (-200:400)/100
C_cutoff <- 0.025
#plot true compliance
ggplot() +
geom_line(aes(x = X_range, y = sapply(X_range, C_probability),
color = "P(S = C|X)")) +
geom_line(aes(x = X_range, y = sapply(X_range, T_probability),
color = "P(T = 1|X)")) +
geom_line(aes(x = X_range, y = dnorm(X_range, mean = X_mean, sd = X_sd),
color = "P(X)")) + ylab("Density") + xlab("X")
#plot true treatment effect for continuous Y
ggplot() +
geom_line(aes(x = X_range,
y = sapply(X_range, function(x.) ((alpha*x.) + beta)))) +
ylab("True treatment effect") + xlab("X")
#Simulate
U <- rbinom(n,1,UP)
X <- rnorm(n, mean = X_mean, sd = X_sd)
Z <- rbinom(n, 1, ZP)
delta <- rnorm(n, 0, delta_sd)
epsilon <- rnorm(n, 0, epsilon_sd)
TP <- plogis(ZT*Z + XT*X + UT*U + delta)
T <- rbinom(rep(n,n),1,TP)
Y <- alpha*X*T + beta*T + UY*U + XY*X + epsilon
#Model continous outcome
Denominator_model <- glm(T ~ Z + X, family = "binomial")
Numarator_model <- lm(Y~Z + X + Z*X)
Confounded_model <- lm(Y~ T + X + T*X)
#IV and confounded effect estimation
Correction_df <- data.frame(X_r = X_range,
tau = sapply(X_range, function(x.) ((alpha*x.) + beta)),
C_E = sapply(X_range, Confounded_estimator),
IV_E = sapply(X_range, IV_estimator),
Conditional_C_prob = sapply(X_range, C_prob_estimator))
Correction_df <- Correction_df %>%
mutate(Marginal_C_prob = dnorm(X_r, mean = mean(X), sd = sd(X)) *
Conditional_C_prob,
high_C = Marginal_C_prob > C_cutoff)
#Compliance estimation
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Conditional_C_prob,
color = "Estimated P(S = C|X)")) +
geom_line(aes(x = X_r, y = sapply(X_range, C_probability),
color = "True P(S = C|X)")) + ylab("Density") + xlab("X")
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Marginal_C_prob)) +
ylab("Estimated P(S = C & X)") + xlab("X")
grid.arrange(ggplot(Correction_df) +
geom_line(aes(x = X_r,
y = Marginal_C_prob)) +
geom_hline(yintercept = C_cutoff) +
xlab("X") + ylab("Estimated P(S = C & X)"),
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
xlab("X") + ylab("CATE") +
theme(legend.position="none"),
ncol = 1, nrow = 2)
#Effect estimation in the complier region
ggplot(Correction_df %>% filter(high_C)) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) + xlab("X") + ylab("CATE")
Correction_df <- Correction_df %>% mutate(B = C_E - IV_E)
Bias_model <- lm(B ~ X_r,
data = Correction_df %>% filter(high_C),
weights = Marginal_C_prob)
Correction_df$My_E <- sapply(Correction_df$X_r, Corrected_estimator)
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = My_E,
color = "Corrected estimate")) +
geom_line(aes(x = X_range, y = C_E,
color = "Confounded estimate")) + xlab("X") + ylab("CATE")
w <- rMultinom(rbind(c(.1,.2,.3,.4),c(.4,.3,.2,.1)),200)
rep(n,n)
install.packages("Hmisc")
#Categorical treatment
library(Hmisc)
# covariate matrix
mX = matrix(rnorm(1000), 200, 5)
# coefficients for each choice
vCoef1 = rep(0, 5)
vCoef2 = rnorm(5)
vCoef3 = rnorm(5)
# vector of probabilities
vProb = cbind(exp(mX%*%vCoef1), exp(mX%*%vCoef2), exp(mX%*%vCoef3))
vProb
install.packages("GauPro")
library(doParallel)
library(doRNG)
library(dplyr)
library(marginaleffects)
library(ggplot2)
library(gridExtra)
setwd("C:/Users/kazem/Dropbox/NESTIMATOR PhD/R Scripts/nestimator2/Nestimator2")
source("Functions.R")
C_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of compliance
return((UP.*(plogis(ZT.+UT.+(XT.*x)) - plogis(UT.+(XT.*x)))) +
((1-UP.)*(plogis(ZT.+(XT.*x)) - plogis(XT.*x))))
}
AT_probability <- function(x, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of always-taker
return((UP.*plogis(UT.+(XT.*x))) + ((1-UP.)*plogis(XT.*x)))
}
NT_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP){
#Function to calculate true probability of never taker
return(1-((UP.*plogis(ZT.+UT.+(XT.*x))) + ((1-UP.)*plogis(ZT.+(XT.*x)))))
}
T_probability <- function(x, ZT. = ZT, XT. = XT, UT. = UT, UP. = UP, ZP. = ZP){
#Function to calculate true probability of T = 1
return((UP.*ZP.*plogis(ZT.+UT.+(XT.*x))) +
(UP.*(1-ZP.)*plogis(UT.+(XT.*x))) +
((1-UP.)*ZP.*plogis(ZT.+(XT.*x))) +
((1-UP.)*(1-ZP.)*plogis((XT.*x))))
}
C_prob_estimator <- function(x, D_model = Denominator_model){
#Function to calculate estimate probability of compliance
out <- predict(D_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
return(out[2] - out[1])
}
IV_estimator <- function(x, N_model = Numarator_model,
D_model = Denominator_model, Y_bin = FALSE){
#Function to estimate the CATE with IV
N_class <- class(N_model)[length(class(N_model))]
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
if(Y_bin){
if(N_class == "lm"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
}else if(N_class == "svm"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)), probability = TRUE)
numarator <- attributes(numarator)$probabilities %>% as.data.frame()
numarator <- numarator[["TRUE"]]
}else if(N_class == "randomForest"){
numarator <- predict(N_model, newdata = data.frame(X = c(x,x), Z = c(0,1)), type = "prob") %>% as.data.frame()
numarator <- numarator[["TRUE"]]
}else{
return("N_model is not supported")
}
}
numarator <- numarator[2] - numarator[1]
denominator <- predict(D_model, newdata = data.frame(X = c(x,x), Z = c(0,1)),
type = "response")
denominator <- denominator[2] - denominator[1]
return(numarator/denominator)
}
Confounded_estimator <- function(x, C_model = Confounded_model){
#Function to estimate the CATE with confounded model
out <- predict(C_model, newdata = data.frame(X = c(x,x), T = c(0,1)),
type = "response")
return(out[2] - out[1])
}
Combined_estimator <- function(x, C_model = Confounded_model,
B_model = Bias_model){
#Function to estimate the CATE combining the confounded and the IV model
C_out <- predict(C_model, newdata = data.frame(X = c(x,x), T = c(0,1)),
type = "response")
B_out <- predict(B_model, newdata = data.frame(X_r = x),
type = "response")
return(C_out[2] - C_out[1] - B_out)
}
n <- 10000
UP <- 0.5
X_mean <- 1.5
X_sd <- 1
ZP <- 0.5
delta_sd <- 1
epsilon_sd <- 1
UT <- -3
XT <- 2
ZT <- 4
UY <- 6
XY <- 2
alpha <- 1
beta <- 1
X_range <- (-200:400)/100
C_cutoff <- 0.05
#Simulate
U <- rbinom(n,1,UP)
X <- rnorm(n, mean = X_mean, sd = X_sd)
Z <- rbinom(n, 1, ZP)
delta <- rnorm(n, 0, delta_sd)
epsilon <- rnorm(n, 0, epsilon_sd)
TP <- plogis(ZT*Z + XT*X + UT*U + delta)
T <- rbinom(rep(n,n),1,TP)
Y <- (alpha*X + beta)*T + UY*U + XY*X + epsilon
#plot true compliance
ggplot() +
geom_line(aes(x = X_range, y = sapply(X_range, C_probability),
color = "P(S = C|X)")) +
geom_line(aes(x = X_range, y = sapply(X_range, T_probability),
color = "P(T = 1|X)")) +
geom_line(aes(x = X_range, y = dnorm(X_range, mean = X_mean, sd = X_sd),
color = "P(X)")) + ylab("Density") + xlab("X")
#plot true treatment effect for continuous Y
ggplot() +
geom_line(aes(x = X_range,
y = sapply(X_range, function(x.) ((alpha*x.) + beta)))) +
ylab("True treatment effect") + xlab("X")
#Model continous outcome
Denominator_model <- glm(T ~ Z + X, family = "binomial")
Numarator_model <- lm(Y~Z + X + Z*X + I(X^2))
Confounded_model <- lm(Y~ T + X + T*X)
#IV and confounded effect estimation
Correction_df <- data.frame(X_r = X_range,
tau = sapply(X_range, function(x.) ((alpha*x.) + beta)),
C_E = sapply(X_range, Confounded_estimator),
IV_E = sapply(X_range, IV_estimator),
Conditional_C_prob = sapply(X_range, C_prob_estimator))
Correction_df <- Correction_df %>%
mutate(Marginal_C_prob = dnorm(X_r, mean = mean(X), sd = sd(X)) *
Conditional_C_prob,
high_C = Marginal_C_prob > C_cutoff)
#Corrected model
Corrected_model <- lm(IV_E ~ X_r,
data = Correction_df,
weights = Marginal_C_prob)
Correction_df$LIV_E <- predict(Corrected_model, newdata = data.frame(X_r = Correction_df$X_r), type = "response")
#Compliance estimation
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Conditional_C_prob,
color = "Estimated P(S = C|X)")) +
geom_line(aes(x = X_r, y = sapply(X_range, C_probability),
color = "True P(S = C|X)")) + ylab("Density") + xlab("X")
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Marginal_C_prob)) +
ylab("Estimated P(S = C & X)") + xlab("X")
grid.arrange(ggplot(Correction_df) +
geom_line(aes(x = X_r,
y = Marginal_C_prob)) +
geom_hline(yintercept = C_cutoff) +
xlab("X") + ylab("Estimated P(S = C & X)"),
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected estimate")) +
xlab("X") + ylab("CATE") +
theme(legend.position="none"),
ncol = 1, nrow = 2)
#Effect estimation in the complier region
ggplot(Correction_df %>% filter(high_C)) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected estimate")) + xlab("X") + ylab("CATE")
Correction_df <- Correction_df %>% mutate(B = C_E - IV_E)
Bias_model <- lm(B ~ X_r,
data = Correction_df %>% filter(high_C),
weights = Marginal_C_prob)
Correction_df$My_E <- sapply(Correction_df$X_r, Combined_estimator)
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = My_E,
color = "Combined estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected IV estimate")) + xlab("X") + ylab("CATE")
X_range <- X
#plot true compliance
ggplot() +
geom_line(aes(x = X_range, y = sapply(X_range, C_probability),
color = "P(S = C|X)")) +
geom_line(aes(x = X_range, y = sapply(X_range, T_probability),
color = "P(T = 1|X)")) +
geom_line(aes(x = X_range, y = dnorm(X_range, mean = X_mean, sd = X_sd),
color = "P(X)")) + ylab("Density") + xlab("X")
#plot true treatment effect for continuous Y
ggplot() +
geom_line(aes(x = X_range,
y = sapply(X_range, function(x.) ((alpha*x.) + beta)))) +
ylab("True treatment effect") + xlab("X")
#Model continous outcome
Denominator_model <- glm(T ~ Z + X, family = "binomial")
Numarator_model <- lm(Y~Z + X + Z*X + I(X^2))
Confounded_model <- lm(Y~ T + X + T*X)
#IV and confounded effect estimation
Correction_df <- data.frame(X_r = X_range,
tau = sapply(X_range, function(x.) ((alpha*x.) + beta)),
C_E = sapply(X_range, Confounded_estimator),
IV_E = sapply(X_range, IV_estimator),
Conditional_C_prob = sapply(X_range, C_prob_estimator))
Correction_df <- Correction_df %>%
mutate(Marginal_C_prob = dnorm(X_r, mean = mean(X), sd = sd(X)) *
Conditional_C_prob,
high_C = Marginal_C_prob > C_cutoff)
#Corrected model
Corrected_model <- lm(IV_E ~ X_r,
data = Correction_df,
weights = Marginal_C_prob)
Correction_df$LIV_E <- predict(Corrected_model, newdata = data.frame(X_r = Correction_df$X_r), type = "response")
#Compliance estimation
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Conditional_C_prob,
color = "Estimated P(S = C|X)")) +
geom_line(aes(x = X_r, y = sapply(X_range, C_probability),
color = "True P(S = C|X)")) + ylab("Density") + xlab("X")
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = Marginal_C_prob)) +
ylab("Estimated P(S = C & X)") + xlab("X")
grid.arrange(ggplot(Correction_df) +
geom_line(aes(x = X_r,
y = Marginal_C_prob)) +
geom_hline(yintercept = C_cutoff) +
xlab("X") + ylab("Estimated P(S = C & X)"),
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected estimate")) +
xlab("X") + ylab("CATE") +
theme(legend.position="none"),
ncol = 1, nrow = 2)
#Effect estimation in the complier region
ggplot(Correction_df %>% filter(high_C)) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = IV_E,
color = "IV estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected estimate")) + xlab("X") + ylab("CATE")
Correction_df <- Correction_df %>% mutate(B = C_E - IV_E)
Bias_model <- lm(B ~ X_r,
data = Correction_df %>% filter(high_C),
weights = Marginal_C_prob)
Correction_df$My_E <- sapply(Correction_df$X_r, Combined_estimator)
ggplot(Correction_df) +
geom_line(aes(x = X_r, y = tau,
color = "tau")) +
geom_line(aes(x = X_r, y = My_E,
color = "Combined estimate")) +
geom_line(aes(x = X_r, y = C_E,
color = "Confounded estimate")) +
geom_line(aes(x = X_r, y = LIV_E,
color = "Corrected IV estimate")) + xlab("X") + ylab("CATE")
load("C:/Users/kazem/Dropbox/NESTIMATOR PhD/R Scripts/nestimator2/Nestimator2/foundA.Rdata")
Z <- list("2010" = c("Inf", "Gol", "Cer", "Eta", "Ada"),
"2011" = c("Eta", "Inf", "Cer", "Gol", "Ada"),
"2012" = c("Inf", "Eta", "Cer", "Gol", "Ada"),
"2013" = c("Cer", "Inf", "Gol", "Eta", "Ada"),
"2014" = c("Inf", "Cer", "Gol", "Ada", "Eta"),
"2015" = c("Inf", "Cer", "Gol", "Eta", "Ada"),
"2016" = c("Inf", "Cer", "Eta", "Gol", "Ada"),
"2017" = c("Inf", "Eta", "Gol", "Cer", "Ada"),
"2018" = c("Inf", "Eta", "Cer", "Ada", "Gol"),
"2019" = c("Ada", "Inf", "Eta", "Cer", "Gol"),
"2020" = c("Ada", "Inf", "Eta", "Cer", "Gol") ,
"2021" = c("Ada", "Inf", "Eta", "Cer", "Gol") ,
"2022" = c("Ada", "Inf", "Eta", "Cer", "Gol") ,
"2023" = c("Ada", "Inf", "Eta", "Cer", "Gol")
)
setwd("C:/Users/kazem/Dropbox/NESTIMATOR PhD/R Scripts/nestimator2/Nestimator2")
source("Functions.R")
R <- MakeR(A, Z, T_decider)
#Make tables for secondary and sensitivity analysis for different Pis
foundR <- MakeR(foundA, Z, T_decider)
foundKB <- MakeKB(foundR, TLevels, 4)
load("C:/Users/kazem/Documents/Data/tdToTSD/td/CompleteData.Rdata")
TLevels <- levels(CompleteData$trtgrp)
foundKB <- MakeKB(foundR, TLevels, 4)
foundb <- KbSolver(foundKB, 3)
foundPis <- PiIdentifier(foundb)
A <- list(
AT_A = c("Ada"),
AT_C = c("Cer"),
AT_E = c("Eta"),
AT_G = c("Gol"),
AT_I = c("Inf"),
C_AE = c("Ada", "Eta"),
C_AG = c("Gol", "Ada"),
C_AI = c("Inf", "Ada"),
C_CG = c("Cer", "Gol"),
NT_EI = c("Ada", "Cer", "Gol"),
NT_CG = c("Ada", "Eta", "Inf"),
NT_CE = c("Ada", "Gol", "Inf"),
NT_I = c("Ada", "Cer", "Gol", "Eta"),
C = c("Inf", "Eta", "Ada", "Cer", "Gol")
)
TLevels <- levels(CompleteData$trtgrp)
R <- MakeR(A, Z, T_decider)
KB. <- MakeKB(R, TLevels, 4)
b. <- KbSolver(KB., 3)
Pis <- PiIdentifier(b.)
